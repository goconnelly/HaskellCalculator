
==================== FINAL INTERFACE ====================
2017-12-07 17:53:14.5317512 UTC

interface calculator-0.1.0.0-9ShsRLERtFy4Roy8EMGn4g:Parser 8002
  interface hash: 3a87601c2cdcd53fce8ce9b555a1a8d2
  ABI hash: ce41d4c85e91634d823e3c2023a45686
  export-list hash: 600415cd8360953df807a97a0923e73c
  orphan hash: 9e65e89acc170976d4d8c6749db8bc80
  flag hash: dc252629160a211b4eef177e4c1f5a39
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parser.p_appExpr
  Parser.p_funcStmt
  Parser.p_line
  Parser.runParser
module dependencies: Common
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      Win32-2.3.1.1@Win32-2.3.1.1 array-0.5.1.1@array-0.5.1.1
                      base-4.9.1.0 binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      megaparsec-5.3.1@megaparsec-5.3.1-EvtC1a4ozvRI8nz4BqBxmx
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         megaparsec-5.3.1@megaparsec-5.3.1-EvtC1a4ozvRI8nz4BqBxmx:Text.Megaparsec.Error
                         megaparsec-5.3.1@megaparsec-5.3.1-EvtC1a4ozvRI8nz4BqBxmx:Text.Megaparsec.Pos
                         megaparsec-5.3.1@megaparsec-5.3.1-EvtC1a4ozvRI8nz4BqBxmx:Text.Megaparsec.Prim
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
import  -/  base-4.9.1.0:Data.Either 186ef9adf6b47e24f39efe9b2e18e352
import  -/  base-4.9.1.0:Data.Functor 682cc832c233b71cec70179490a08631
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Err 20faef8829fd13c027d0ee2213637534
import  -/  base-4.9.1.0:GHC.Real b88ae4a48c079652623073a5bbf5c9b0
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  Common 7c8577ad357058b243b7f3a9d016c5e0
  exports: 02b86d8d7ebf5d2c7d9b0b6f8348dd36
  AddExpr 85c5c4d9fcdfa1e8516157ea4498900b
  ConstExpr 33072b562be487078c0b436421568e1c
  DivideExpr dc46e13fea556379794ee66ced9f97b0
  Expr 5f23b1d9cf74804ca7ba6b327a33870e
  Expr b5eb1b9a874f72d45d66d66dc3ebd80b
  Line 13f097a6ea259a02c10bb042aa389ece
  MultiplyExpr 29d7f96ab2ef493b9fcb3c9925fed11f
  NumExpr 52f27286f5a541341fc0ffb1f310305e
  SeqStmt 22a04eb350705ef9dc4d7a5170f95e14
  SetStmt 27e823fbe503afc519268bedc381312a
  Stmt ac7dd0c8180aa9e8b888de0fbb72ab05
  Stmt 218bba9a49c1dae1a3024ee2b3c71b99
  SubtractExpr 3d4cb0fab895e78e648628a5b1a9a25e
  VarExpr e81242b34d854bc84d027d7f530abb2b
  consts 3832aa53649195f24011b82a11ef9ea7
import  -/  megaparsec-5.3.1@megaparsec-5.3.1-EvtC1a4ozvRI8nz4BqBxmx:Text.Megaparsec a1fcb6b49170f80ba33a00553651d3d2
import  -/  megaparsec-5.3.1@megaparsec-5.3.1-EvtC1a4ozvRI8nz4BqBxmx:Text.Megaparsec.Char 8c4f727b428a24e6c647456f2f5be739
import  -/  megaparsec-5.3.1@megaparsec-5.3.1-EvtC1a4ozvRI8nz4BqBxmx:Text.Megaparsec.Combinator 0c77a0a853c09c441d70df20f117ee5a
import  -/  megaparsec-5.3.1@megaparsec-5.3.1-EvtC1a4ozvRI8nz4BqBxmx:Text.Megaparsec.Error e5f79056817bd8ec80b9e940c4b64840
import  -/  megaparsec-5.3.1@megaparsec-5.3.1-EvtC1a4ozvRI8nz4BqBxmx:Text.Megaparsec.Expr 0d569ae607cca8227812131bc6e5b33e
import  -/  megaparsec-5.3.1@megaparsec-5.3.1-EvtC1a4ozvRI8nz4BqBxmx:Text.Megaparsec.Lexer 08c4c3c6f0c00294a26f91836c71b270
import  -/  megaparsec-5.3.1@megaparsec-5.3.1-EvtC1a4ozvRI8nz4BqBxmx:Text.Megaparsec.Prim 1f920bdd581dfb6f06e05176d07b091f
import  -/  megaparsec-5.3.1@megaparsec-5.3.1-EvtC1a4ozvRI8nz4BqBxmx:Text.Megaparsec.String 7fcefc53bed12c1872e466cf824ebe66
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base bc82d1baec8d9b794d947a6de22d7684
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Strict d885b1d9a1e033a14f7012d569830271
14bffd21482141983bce55f139fce65e
  $s$fAlternativeParsecT ::
    GHC.Base.Alternative
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (m :: * -> *).
                  @ (Text.Megaparsec.Prim.ParsecT
                       Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
                  (Parser.$s$fAlternativeParsecT_$s$fApplicativeParsecT @ m)
                  (Text.Megaparsec.Prim.$fAlternativeParsecT_$cempty
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fAlternativeParsecT_$c<|>
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fAlternativeParsecT_$csome
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fAlternativeParsecT_$cmany
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[]) -}
bafc51e57c8b37f2064e582ab88ed312
  $s$fAlternativeParsecT_$s$fApplicativeParsecT ::
    GHC.Base.Applicative
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (m :: * -> *).
                  @ (Text.Megaparsec.Prim.ParsecT
                       Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
                  (Parser.$s$fAlternativeParsecT_$s$fApplicativeParsecT_$cp1Applicative
                     @ m)
                  (Text.Megaparsec.Prim.$fApplicativeParsecT_$cpure
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fApplicativeParsecT_$c<*>
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fApplicativeParsecT_$c*>
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fApplicativeParsecT_$c<*
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[]) -}
babcedf7b833f96c1a28f2978b19ddef
  $s$fAlternativeParsecT_$s$fApplicativeParsecT_$cp1Applicative ::
    GHC.Base.Functor
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Text.Megaparsec.Prim.$fFunctorParsecT
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]) -}
53af1ee788d43bcf255609900f7b17f6
  $s$fMonadParsecT ::
    GHC.Base.Monad
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (m :: * -> *).
                  @ (Text.Megaparsec.Prim.ParsecT
                       Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
                  (Text.Megaparsec.Prim.$fMonadParsecT_$cp1Monad
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecT_$c>>=
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecT_$c>>
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecT_$creturn
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecT_$cfail
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[]) -}
3b4bbcc3979af804e8e7ccda0bc0ebb7
  $s$fMonadParsecesParsecT ::
    Text.Megaparsec.Prim.MonadParsec
      Text.Megaparsec.Error.Dec
      [GHC.Types.Char]
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (m :: * -> *).
                  @ Text.Megaparsec.Error.Dec
                  @ [GHC.Types.Char]
                  @ (Text.Megaparsec.Prim.ParsecT
                       Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
                  (Parser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$cp1MonadParsec
                     @ m)
                  (Parser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$cp2MonadParsec
                     @ m)
                  (Parser.$s$fAlternativeParsecT @ m)
                  (Parser.$s$fMonadParsecesParsecT_$s$fMonadPlusParsecT @ m)
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cfailure
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Parser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$clabel
                     @ m)
                  (Parser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$chidden
                     @ m)
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$ctry
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$clookAhead
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cnotFollowedBy
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cwithRecovery
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cobserving
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$ceof
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Parser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$ctoken
                     @ m)
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$ctokens
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cgetParserState
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cupdateParserState
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[]) -}
0a88de2636b6fb27286c466d9d5188a7
  $s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$chidden ::
    Text.Megaparsec.Prim.ParsecT
      Text.Megaparsec.Error.Dec [GHC.Types.Char] m a
    -> Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, False)
                (\ @ (m :: * -> *)
                   @ a
                   (eta10 :: Text.Megaparsec.Prim.ParsecT
                               Text.Megaparsec.Error.Dec [GHC.Types.Char] m a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall b.
                      Text.Megaparsec.Prim.State [GHC.Types.Char]
                      -> (a
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> m b)
                      -> (Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                      -> (a
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> m b)
                      -> (Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                      -> m b)
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec [GHC.Types.Char] m a)
                   (\ (tpl :: forall b.
                              Text.Megaparsec.Prim.State [GHC.Types.Char]
                              -> (a
                                  -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                                  -> Text.Megaparsec.Prim.Hints
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                  -> m b)
                              -> (Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                    Text.Megaparsec.Error.Dec
                                  -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                              -> (a
                                  -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                                  -> Text.Megaparsec.Prim.Hints
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                  -> m b)
                              -> (Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                    Text.Megaparsec.Error.Dec
                                  -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                              -> m b) ->
                    tpl)
                     `cast`
                   (<forall b.
                     Text.Megaparsec.Prim.State [GHC.Types.Char]
                     -> (a
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                         -> Text.Megaparsec.Prim.Hints
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                         -> m b)
                     -> (Text.Megaparsec.Error.ParseError
                           (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           Text.Megaparsec.Error.Dec
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                     -> (a
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                         -> Text.Megaparsec.Prim.Hints
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                         -> m b)
                     -> (Text.Megaparsec.Error.ParseError
                           (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           Text.Megaparsec.Error.Dec
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                     -> m b>_R
                    ->_R Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                                  <Text.Megaparsec.Error.Dec>_N <[GHC.Types.Char]>_N <m>_R <a>_R))
                   (\ @ b
                      (s1 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                      (cok :: a
                              -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                              -> Text.Megaparsec.Prim.Hints
                                   (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              -> m b)
                      (cerr :: Text.Megaparsec.Error.ParseError
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                 Text.Megaparsec.Error.Dec
                               -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                      (eok :: a
                              -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                              -> Text.Megaparsec.Prim.Hints
                                   (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              -> m b)
                      (eerr :: Text.Megaparsec.Error.ParseError
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                 Text.Megaparsec.Error.Dec
                               -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b) ->
                    let {
                      cl2 :: GHC.Base.Maybe
                               (Text.Megaparsec.Error.ErrorItem
                                  (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                      = Text.Megaparsec.Prim.$fMonadParsecesParsecT_$s<$>
                          @ (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
                          @ (Text.Megaparsec.Error.ErrorItem
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                          (\ (x :: Data.List.NonEmpty.NonEmpty GHC.Types.Char)[OneShot] ->
                           Text.Megaparsec.Error.Label
                             @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                             (Data.Semigroup.$fSemigroupNonEmpty_$c<>
                                @ GHC.Types.Char
                                (Data.List.NonEmpty.fromList
                                   @ GHC.Types.Char
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b1 ->
                                       GHC.CString.unpackFoldrCString# @ b1 "the rest of "#)))
                                x))
                          (Data.List.NonEmpty.nonEmpty
                             @ GHC.Types.Char
                             (GHC.Types.[] @ GHC.Types.Char))
                    } in
                    let {
                      el2 :: GHC.Base.Maybe
                               (Text.Megaparsec.Error.ErrorItem
                                  (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                      = Text.Megaparsec.Prim.$fMonadParsecesParsecT_$s<$>
                          @ (Data.List.NonEmpty.NonEmpty GHC.Types.Char)
                          @ (Text.Megaparsec.Error.ErrorItem
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                          (Text.Megaparsec.Error.Label
                             @ (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                          (Data.List.NonEmpty.nonEmpty
                             @ GHC.Types.Char
                             (GHC.Types.[] @ GHC.Types.Char))
                    } in
                    Text.Megaparsec.Prim.unParser
                      @ Text.Megaparsec.Error.Dec
                      @ [GHC.Types.Char]
                      @ m
                      @ a
                      eta10
                      @ b
                      s1
                      (\ (x :: a)
                         (s' :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                         (hs :: Text.Megaparsec.Prim.Hints
                                  (Text.Megaparsec.Prim.Token [GHC.Types.Char])) ->
                       cok
                         x
                         s'
                         (Text.Megaparsec.Prim.refreshLastHint
                            @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            hs
                            cl2))
                      cerr
                      (\ (x :: a)
                         (s' :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                         (hs :: Text.Megaparsec.Prim.Hints
                                  (Text.Megaparsec.Prim.Token [GHC.Types.Char])) ->
                       eok
                         x
                         s'
                         (Text.Megaparsec.Prim.refreshLastHint
                            @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            hs
                            el2))
                      (\ (err :: Text.Megaparsec.Error.ParseError
                                   (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                   Text.Megaparsec.Error.Dec) ->
                       eerr
                         (case err of wild { Text.Megaparsec.Error.ParseError ds ds1 ds2 ds3 ->
                          Text.Megaparsec.Error.ParseError
                            @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            @ Text.Megaparsec.Error.Dec
                            ds
                            ds1
                            (Data.Maybe.maybe
                               @ (Data.Set.Base.Set
                                    (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                               @ (Text.Megaparsec.Error.ErrorItem
                                    (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                               (Data.Set.Base.Tip
                                  @ (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                               (Data.Set.Base.singleton
                                  @ (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                               el2)
                            ds3 })))) -}
7dd66cab6e2e03b4d2272527f27efa2e
  $s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$clabel ::
    GHC.Base.String
    -> Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m a
    -> Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m a
  {- Arity: 2, Strictness: <L,U><L,C(C1(C1(C1(C1(U)))))>,
     Unfolding: InlineRule (0, True, True)
                (Text.Megaparsec.Prim.pLabel
                   @ Text.Megaparsec.Error.Dec
                   @ [GHC.Types.Char]) -}
827024bc0aa4f5f8859030f51cd4eabc
  $s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$cp1MonadParsec ::
    Text.Megaparsec.Error.ErrorComponent Text.Megaparsec.Error.Dec
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (\ @ (m :: * -> *) -> Text.Megaparsec.Error.$fErrorComponentDec) -}
36bfeb50e1652cd4150900c280ba293f
  $s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$cp2MonadParsec ::
    Text.Megaparsec.Prim.Stream [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (\ @ (m :: * -> *) -> Text.Megaparsec.Prim.$fStream[]) -}
9f10d7b161afb53ed56b13f0117f3235
  $s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$ctoken ::
    (Text.Megaparsec.Prim.Token [GHC.Types.Char]
     -> Data.Either.Either
          (Data.Set.Base.Set
             (Text.Megaparsec.Error.ErrorItem
                (Text.Megaparsec.Prim.Token [GHC.Types.Char])),
           Data.Set.Base.Set
             (Text.Megaparsec.Error.ErrorItem
                (Text.Megaparsec.Prim.Token [GHC.Types.Char])),
           Data.Set.Base.Set Text.Megaparsec.Error.Dec)
          a)
    -> GHC.Base.Maybe (Text.Megaparsec.Prim.Token [GHC.Types.Char])
    -> Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m a
  {- Arity: 7,
     Strictness: <L,1*C1(U)><L,1*U><S(SSLL),1*U(U,U(U(U,U,U),U),U,U(U))><L,1*C1(C1(C1(U)))><L,A><L,A><L,1*C1(C1(U))>,
     Unfolding: InlineRule (0, True, False)
                (\ @ (m :: * -> *)
                   @ a
                   (eta10 :: Text.Megaparsec.Prim.Token [GHC.Types.Char]
                             -> Data.Either.Either
                                  (Data.Set.Base.Set
                                     (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Prim.Token [GHC.Types.Char])),
                                   Data.Set.Base.Set
                                     (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Prim.Token [GHC.Types.Char])),
                                   Data.Set.Base.Set Text.Megaparsec.Error.Dec)
                                  a)
                   (eta11 :: GHC.Base.Maybe
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (forall b.
                      Text.Megaparsec.Prim.State [GHC.Types.Char]
                      -> (a
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> m b)
                      -> (Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                      -> (a
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> m b)
                      -> (Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                      -> m b)
                   @ (Text.Megaparsec.Prim.ParsecT
                        Text.Megaparsec.Error.Dec [GHC.Types.Char] m a)
                   (\ (tpl :: forall b.
                              Text.Megaparsec.Prim.State [GHC.Types.Char]
                              -> (a
                                  -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                                  -> Text.Megaparsec.Prim.Hints
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                  -> m b)
                              -> (Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                    Text.Megaparsec.Error.Dec
                                  -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                              -> (a
                                  -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                                  -> Text.Megaparsec.Prim.Hints
                                       (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                  -> m b)
                              -> (Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                    Text.Megaparsec.Error.Dec
                                  -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                              -> m b) ->
                    tpl)
                     `cast`
                   (<forall b.
                     Text.Megaparsec.Prim.State [GHC.Types.Char]
                     -> (a
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                         -> Text.Megaparsec.Prim.Hints
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                         -> m b)
                     -> (Text.Megaparsec.Error.ParseError
                           (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           Text.Megaparsec.Error.Dec
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                     -> (a
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                         -> Text.Megaparsec.Prim.Hints
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                         -> m b)
                     -> (Text.Megaparsec.Error.ParseError
                           (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           Text.Megaparsec.Error.Dec
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                     -> m b>_R
                    ->_R Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                                  <Text.Megaparsec.Error.Dec>_N <[GHC.Types.Char]>_N <m>_R <a>_R))
                   (\ @ b
                      (s1 :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                      (cok :: a
                              -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                              -> Text.Megaparsec.Prim.Hints
                                   (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              -> m b)
                      (ds :: Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                               Text.Megaparsec.Error.Dec
                             -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b)
                      (ds1 :: a
                              -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                              -> Text.Megaparsec.Prim.Hints
                                   (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              -> m b)
                      (eerr :: Text.Megaparsec.Error.ParseError
                                 (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                 Text.Megaparsec.Error.Dec
                               -> Text.Megaparsec.Prim.State [GHC.Types.Char] -> m b) ->
                    case s1 of wild { Text.Megaparsec.Prim.State input ds2 dt w ->
                    case ds2 of wild1 { Data.List.NonEmpty.:| pos z ->
                    case input of wild2 {
                      []
                      -> eerr
                           (Text.Megaparsec.Error.ParseError
                              @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                              @ Text.Megaparsec.Error.Dec
                              (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos pos z)
                              (Data.Set.Base.Bin
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                                 1#
                                 (Text.Megaparsec.Error.EndOfInput
                                    @ (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                                 (Data.Set.Base.Tip
                                    @ (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                                 (Data.Set.Base.Tip
                                    @ (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Prim.Token [GHC.Types.Char]))))
                              (Data.Maybe.maybe
                                 @ (Data.Set.Base.Set
                                      (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                                 @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                 (Data.Set.Base.Tip
                                    @ (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                                 (\ (x :: Text.Megaparsec.Prim.Token [GHC.Types.Char])[OneShot] ->
                                  Data.Set.Base.Bin
                                    @ (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                                    1#
                                    (Text.Megaparsec.Error.Tokens
                                       @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                       (Text.Megaparsec.Prim.nes
                                          @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                          x))
                                    (Data.Set.Base.Tip
                                       @ (Text.Megaparsec.Error.ErrorItem
                                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                                    (Data.Set.Base.Tip
                                       @ (Text.Megaparsec.Error.ErrorItem
                                            (Text.Megaparsec.Prim.Token [GHC.Types.Char]))))
                                 eta11)
                              (Data.Set.Base.Tip @ Text.Megaparsec.Error.Dec))
                           wild
                      : t ts
                      -> case eta10
                                t `cast`
                                (Sub (Sym (Text.Megaparsec.Prim.D:R:Token[][0]))) of wild4 {
                           Data.Either.Left ds4
                           -> case ds4 of wild5 { (,,) us ps xs ->
                              case GHC.Base.const
                                     @ (Text.Megaparsec.Pos.Pos
                                        -> Text.Megaparsec.Pos.SourcePos
                                        -> GHC.Types.Char
                                        -> (Text.Megaparsec.Pos.SourcePos,
                                            Text.Megaparsec.Pos.SourcePos))
                                     @ (Data.Proxy.Proxy GHC.Base.String)
                                     Text.Megaparsec.Pos.defaultUpdatePos
                                     (Data.Proxy.Proxy @ * @ [GHC.Types.Char])
                                     w
                                     pos
                                     t of wild6 { (,) apos npos ->
                              case apos of apos1 { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                              eerr
                                (Text.Megaparsec.Error.ParseError
                                   @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                   @ Text.Megaparsec.Error.Dec
                                   (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos apos1 z)
                                   us
                                   ps
                                   xs)
                                (Text.Megaparsec.Prim.State
                                   @ [GHC.Types.Char]
                                   wild2
                                   (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos apos1 z)
                                   dt
                                   w) } } }
                           Data.Either.Right x
                           -> case GHC.Base.const
                                     @ (Text.Megaparsec.Pos.Pos
                                        -> Text.Megaparsec.Pos.SourcePos
                                        -> GHC.Types.Char
                                        -> (Text.Megaparsec.Pos.SourcePos,
                                            Text.Megaparsec.Pos.SourcePos))
                                     @ (Data.Proxy.Proxy GHC.Base.String)
                                     Text.Megaparsec.Pos.defaultUpdatePos
                                     (Data.Proxy.Proxy @ * @ [GHC.Types.Char])
                                     w
                                     pos
                                     t of wild5 { (,) apos npos ->
                              case npos of npos1 { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                              cok
                                x
                                (case GHC.Num.$fNumWord_$c+
                                        (GHC.Types.W# dt)
                                        (GHC.Types.W# 1##) of dt1 { GHC.Types.W# dt2 ->
                                 Text.Megaparsec.Prim.State
                                   @ [GHC.Types.Char]
                                   ts
                                   (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos npos1 z)
                                   dt2
                                   w })
                                (Text.Megaparsec.Prim.$fApplicativeParsecT_$cmempty
                                   @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])) } } } } } })) -}
4f94beda93a1a2a04c242361d461c12e
  $s$fMonadParsecesParsecT_$s$fMonadPlusParsecT ::
    GHC.Base.MonadPlus
      (Text.Megaparsec.Prim.ParsecT
         Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (m :: * -> *).
                  @ (Text.Megaparsec.Prim.ParsecT
                       Text.Megaparsec.Error.Dec [GHC.Types.Char] m)
                  (Text.Megaparsec.Prim.$fMonadPlusParsecT_$cp1MonadPlus
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Parser.$s$fMonadParsecT @ m)
                  (Text.Megaparsec.Prim.$fAlternativeParsecT_$cmzero
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[])
                  (Text.Megaparsec.Prim.$fAlternativeParsecT_$cmplus
                     @ Text.Megaparsec.Error.Dec
                     @ [GHC.Types.Char]
                     @ m
                     Text.Megaparsec.Error.$fErrorComponentDec
                     Text.Megaparsec.Prim.$fStream[]) -}
a006c63a502b64c662ec79b5ea20e0f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Parser.$trModule2
                   Parser.$trModule1) -}
bb3ef302eb122800614fa767f73234a4
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Parser"#) -}
492fce7717c97a8e39459011f5e2d925
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "calculator-0.1.0.0-9ShsRLERtFy4Roy8EMGn4g"#) -}
b76d159f1971924e7381c0c68902fa56
  $wlvl ::
    [GHC.Types.Char]
    -> Text.Megaparsec.Pos.SourcePos
    -> [Text.Megaparsec.Pos.SourcePos]
    -> GHC.Prim.Word#
    -> Text.Megaparsec.Pos.Pos
    -> (()
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S,U><L,U(U,U,U)><L,U><L,U><L,U><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ b
                   (ww :: [GHC.Types.Char])
                   (ww1 :: Text.Megaparsec.Pos.SourcePos)
                   (ww2 :: [Text.Megaparsec.Pos.SourcePos])
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: Text.Megaparsec.Pos.Pos)
                   (w :: ()
                         -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                         -> Text.Megaparsec.Prim.Hints
                              (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                         -> Data.Functor.Identity.Identity b)
                   (w1 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b) ->
                 case ww of wild {
                   []
                   -> w GHC.Tuple.()
                        (Text.Megaparsec.Prim.State
                           @ [GHC.Types.Char]
                           (GHC.Types.[] @ GHC.Types.Char)
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos ww1 ww2)
                           ww3
                           ww4)
                        (GHC.Types.[]
                           @ (Data.Set.Base.Set
                                (Text.Megaparsec.Error.ErrorItem
                                   (Text.Megaparsec.Prim.Token [GHC.Types.Char]))))
                          `cast`
                        (Sym (Text.Megaparsec.Prim.N:Hints[0]
                                  <Text.Megaparsec.Prim.Token [GHC.Types.Char]>_N))
                   : t ts
                   -> case ww1 of ww5 { Text.Megaparsec.Pos.SourcePos ww6 ww7 ww8 ->
                      w1
                        (Text.Megaparsec.Error.ParseError
                           @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                           @ Text.Megaparsec.Error.Dec
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos ww5 ww2)
                           (Data.Set.Base.Bin
                              @ (Text.Megaparsec.Error.ErrorItem
                                   (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                              1#
                              (Text.Megaparsec.Error.Tokens
                                 @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                 (Text.Megaparsec.Prim.nes
                                    @ (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                                    t `cast` (Sub (Sym (Text.Megaparsec.Prim.D:R:Token[][0])))))
                              (Data.Set.Base.Tip
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                              (Data.Set.Base.Tip
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Prim.Token [GHC.Types.Char]))))
                           Parser.runParser5
                           (Data.Set.Base.Tip @ Text.Megaparsec.Error.Dec))
                        (Text.Megaparsec.Prim.State
                           @ [GHC.Types.Char]
                           wild
                           (Data.List.NonEmpty.:| @ Text.Megaparsec.Pos.SourcePos ww5 ww2)
                           ww3
                           ww4) } }) -}
c10e580de05bcf01d56236f7d1d124dd
  p_appExpr :: Text.Megaparsec.String.Parser Common.Expr
  {- Strictness: x -}
44ea8cad32a778767741a54047fa237a
  p_funcStmt :: Text.Megaparsec.String.Parser Common.Stmt
  {- Strictness: x -}
9427bb968de3d81e83f38c26fc869adf
  p_line :: Text.Megaparsec.String.Parser Common.Line
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U)><L,C(C1(C1(U)))><L,C(C1(U))><L,C(C1(C1(U)))><L,C(C1(U))>,
     Unfolding: InlineRule (0, True, True)
                Parser.p_line1
                  `cast`
                (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                          <Text.Megaparsec.Error.Dec>_N
                          <[GHC.Types.Char]>_N
                          <Data.Functor.Identity.Identity>_R
                          <Common.Line>_R)) -}
c5e509be8fbfd201ac0bf80cbc4cc0b4
  p_line1 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> (Common.Line
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> (Common.Line
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U)><L,C(C1(C1(U)))><L,C(C1(U))><L,C(C1(C1(U)))><L,C(C1(U))> -}
caae80e53a7e47ad5e41441ae5f6d3b5
  runParser ::
    Text.Megaparsec.String.Parser a
    -> GHC.Base.String -> Data.Either.Either GHC.Base.String a
  {- Arity: 2,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,U>,
     Unfolding: (\ @ a
                   (p3 :: Text.Megaparsec.String.Parser a)
                   (s :: GHC.Base.String) ->
                 case (Text.Megaparsec.Prim.$w$c<*
                         @ Text.Megaparsec.Error.Dec
                         @ [GHC.Types.Char]
                         @ Data.Functor.Identity.Identity
                         Text.Megaparsec.Prim.$fStream[]
                         @ a
                         @ ()
                         p3
                         Parser.runParser4
                           `cast`
                         (Sym (Text.Megaparsec.Prim.N:ParsecT[0]
                                   <Text.Megaparsec.Error.Dec>_N
                                   <[GHC.Types.Char]>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <()>_R))
                         @ (Text.Megaparsec.Prim.Reply
                              Text.Megaparsec.Error.Dec GHC.Base.String a)
                         (Text.Megaparsec.Prim.State
                            @ GHC.Base.String
                            s
                            Parser.runParser1
                            0##
                            Text.Megaparsec.Pos.defaultTabWidth_x
                              `cast`
                            (Sym (Text.Megaparsec.Pos.N:Pos[0])))
                         (Text.Megaparsec.Prim.$fMonadContParsecT5
                            @ Text.Megaparsec.Error.Dec
                            @ GHC.Base.String
                            @ a)
                           `cast`
                         (<a>_R
                          ->_R <Text.Megaparsec.Prim.State GHC.Base.String>_R
                          ->_R <Text.Megaparsec.Prim.Hints
                                  (Text.Megaparsec.Prim.Token GHC.Base.String)>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Megaparsec.Prim.Reply
                                           Text.Megaparsec.Error.Dec GHC.Base.String a>_R))
                         (Text.Megaparsec.Prim.$fMonadContParsecT4
                            @ a
                            @ GHC.Base.String
                            @ Text.Megaparsec.Error.Dec)
                           `cast`
                         (<Text.Megaparsec.Error.ParseError
                             (Text.Megaparsec.Prim.Token GHC.Base.String)
                             Text.Megaparsec.Error.Dec>_R
                          ->_R <Text.Megaparsec.Prim.State GHC.Base.String>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Megaparsec.Prim.Reply
                                           Text.Megaparsec.Error.Dec GHC.Base.String a>_R))
                         (Text.Megaparsec.Prim.$fMonadContParsecT3
                            @ Text.Megaparsec.Error.Dec
                            @ GHC.Base.String
                            @ a)
                           `cast`
                         (<a>_R
                          ->_R <Text.Megaparsec.Prim.State GHC.Base.String>_R
                          ->_R <Text.Megaparsec.Prim.Hints
                                  (Text.Megaparsec.Prim.Token GHC.Base.String)>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Megaparsec.Prim.Reply
                                           Text.Megaparsec.Error.Dec GHC.Base.String a>_R))
                         (Text.Megaparsec.Prim.$fMonadContParsecT2
                            @ a
                            @ GHC.Base.String
                            @ Text.Megaparsec.Error.Dec)
                           `cast`
                         (<Text.Megaparsec.Error.ParseError
                             (Text.Megaparsec.Prim.Token GHC.Base.String)
                             Text.Megaparsec.Error.Dec>_R
                          ->_R <Text.Megaparsec.Prim.State GHC.Base.String>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Megaparsec.Prim.Reply
                                           Text.Megaparsec.Error.Dec GHC.Base.String a>_R)))
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Text.Megaparsec.Prim.Reply
                              Text.Megaparsec.Error.Dec
                              GHC.Base.String
                              a>_R) of wild { Text.Megaparsec.Prim.Reply s' ds result ->
                 case result of wild1 {
                   Text.Megaparsec.Prim.OK x
                   -> Data.Either.Right @ GHC.Base.String @ a x
                   Text.Megaparsec.Prim.Error e1
                   -> Data.Either.Left
                        @ GHC.Base.String
                        @ a
                        (case e1
                                `cast`
                              (Text.Megaparsec.Error.ParseError
                                 (Text.Megaparsec.Prim.D:R:Token[][0])
                                 <Text.Megaparsec.Error.Dec>_N)_R of ww { Text.Megaparsec.Error.ParseError ww1 ww2 ww3 ww4 ->
                         case ww1 of ww5 { Data.List.NonEmpty.:| ww6 ww7 ->
                         Text.Megaparsec.Error.$wparseErrorPretty
                           @ GHC.Types.Char
                           @ Text.Megaparsec.Error.Dec
                           GHC.Classes.$fOrdChar
                           Text.Megaparsec.Error.$fShowTokenChar_$cshowTokens
                             `cast`
                           (Sym (Text.Megaparsec.Error.N:ShowToken[0] <GHC.Types.Char>_N))
                           Text.Megaparsec.Error.$fShowErrorComponentDec
                           ww6
                           ww7
                           ww2
                           ww3
                           ww4 } }) } }) -}
28f3d43476c3b5a4e4eaaef2bb88446c
  runParser1 ::
    Data.List.NonEmpty.NonEmpty Text.Megaparsec.Pos.SourcePos
  {- Unfolding: (Data.List.NonEmpty.:|
                   @ Text.Megaparsec.Pos.SourcePos
                   Parser.runParser2
                   (GHC.Types.[] @ Text.Megaparsec.Pos.SourcePos)) -}
466ecfd9bdb96642acd64ad9ef856307
  runParser2 :: Text.Megaparsec.Pos.SourcePos
  {- Unfolding: (Text.Megaparsec.Pos.SourcePos
                   Parser.runParser3
                   1##
                   1##) -}
78fab99e078739bc6dce2dc64a7bc27d
  runParser3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "<stdin>"#) -}
6cf7e5b0b99ecfda2c1c7e1b84863976
  runParser4 ::
    Text.Megaparsec.Prim.State [GHC.Types.Char]
    -> (()
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> (()
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Text.Megaparsec.Prim.Hints
             (Text.Megaparsec.Prim.Token [GHC.Types.Char])
        -> Data.Functor.Identity.Identity b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Prim.Token [GHC.Types.Char])
          Text.Megaparsec.Error.Dec
        -> Text.Megaparsec.Prim.State [GHC.Types.Char]
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(SSLL),1*U(U,U(U(U,U,U),U),U,U)><L,A><L,A><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w :: Text.Megaparsec.Prim.State [GHC.Types.Char])
                   (w1 :: ()
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: ()
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Text.Megaparsec.Prim.Hints
                               (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Prim.Token [GHC.Types.Char])
                            Text.Megaparsec.Error.Dec
                          -> Text.Megaparsec.Prim.State [GHC.Types.Char]
                          -> Data.Functor.Identity.Identity b) ->
                 case w of ww { Text.Megaparsec.Prim.State ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { Data.List.NonEmpty.:| ww6 ww7 ->
                 Parser.$wlvl @ b ww1 ww6 ww7 ww3 ww4 w3 w4 } }) -}
331004d73008b30569e475ee9dd188e7
  runParser5 ::
    Data.Set.Base.Set
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
  {- HasNoCafRefs,
     Unfolding: (Data.Set.Base.Bin
                   @ (Text.Megaparsec.Error.ErrorItem
                        (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                   1#
                   (Text.Megaparsec.Error.EndOfInput
                      @ (Text.Megaparsec.Prim.Token [GHC.Types.Char]))
                   (Data.Set.Base.Tip
                      @ (Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Prim.Token [GHC.Types.Char])))
                   (Data.Set.Base.Tip
                      @ (Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Prim.Token [GHC.Types.Char])))) -}
"SPEC/Parser $fAlternativeParsecT @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                            -> *)
                                                                    ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                   [GHC.Types.Char])
                                                                    ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                           Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fAlternativeParsecT @ Text.Megaparsec.Error.Dec
                                            @ [GHC.Types.Char]
                                            @ m
                                            $dErrorComponent
                                            $dStream
  = Parser.$s$fAlternativeParsecT @ m
"SPEC/Parser $fApplicativeParsecT @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                            -> *)
                                                                    ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                   [GHC.Types.Char])
                                                                    ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                           Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fApplicativeParsecT @ Text.Megaparsec.Error.Dec
                                            @ [GHC.Types.Char]
                                            @ m
                                            $dErrorComponent
                                            $dStream
  = Parser.$s$fAlternativeParsecT_$s$fApplicativeParsecT @ m
"SPEC/Parser $fApplicativeParsecT_$cp1Applicative @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                                            -> *)
                                                                                    ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                                   [GHC.Types.Char])
                                                                                    ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                                           Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fApplicativeParsecT_$cp1Applicative @ Text.Megaparsec.Error.Dec
                                                            @ [GHC.Types.Char]
                                                            @ m
                                                            $dErrorComponent
                                                            $dStream
  = Parser.$s$fAlternativeParsecT_$s$fApplicativeParsecT_$cp1Applicative
      @ m
"SPEC/Parser $fMonadParsecT @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                      -> *)
                                                              ($dStream :: Text.Megaparsec.Prim.Stream
                                                                             [GHC.Types.Char])
                                                              ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                     Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fMonadParsecT @ Text.Megaparsec.Error.Dec
                                      @ [GHC.Types.Char]
                                      @ m
                                      $dErrorComponent
                                      $dStream
  = Parser.$s$fMonadParsecT @ m
"SPEC/Parser $fMonadParsecesParsecT @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                              -> *)
                                                                      ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                     [GHC.Types.Char])
                                                                      ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                             Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fMonadParsecesParsecT @ Text.Megaparsec.Error.Dec
                                              @ [GHC.Types.Char]
                                              @ m
                                              $dErrorComponent
                                              $dStream
  = Parser.$s$fMonadParsecesParsecT @ m
"SPEC/Parser $fMonadParsecesParsecT_$chidden @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                                       -> *)
                                                                               ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                              [GHC.Types.Char])
                                                                               ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                                      Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fMonadParsecesParsecT_$chidden @ Text.Megaparsec.Error.Dec
                                                       @ [GHC.Types.Char]
                                                       @ m
                                                       $dErrorComponent
                                                       $dStream
  = Parser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$chidden
      @ m
"SPEC/Parser $fMonadParsecesParsecT_$clabel @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                                      -> *)
                                                                              ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                             [GHC.Types.Char])
                                                                              ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                                     Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fMonadParsecesParsecT_$clabel @ Text.Megaparsec.Error.Dec
                                                      @ [GHC.Types.Char]
                                                      @ m
                                                      $dErrorComponent
                                                      $dStream
  = Parser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$clabel
      @ m
"SPEC/Parser $fMonadParsecesParsecT_$cp1MonadParsec @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                                              -> *)
                                                                                      ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                                     [GHC.Types.Char])
                                                                                      ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                                             Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cp1MonadParsec @ Text.Megaparsec.Error.Dec
                                                              @ [GHC.Types.Char]
                                                              @ m
                                                              $dErrorComponent
                                                              $dStream
  = Parser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$cp1MonadParsec
      @ m
"SPEC/Parser $fMonadParsecesParsecT_$cp2MonadParsec @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                                              -> *)
                                                                                      ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                                     [GHC.Types.Char])
                                                                                      ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                                             Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fMonadParsecesParsecT_$cp2MonadParsec @ Text.Megaparsec.Error.Dec
                                                              @ [GHC.Types.Char]
                                                              @ m
                                                              $dErrorComponent
                                                              $dStream
  = Parser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$cp2MonadParsec
      @ m
"SPEC/Parser $fMonadParsecesParsecT_$ctoken @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                                      -> *)
                                                                              ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                             [GHC.Types.Char])
                                                                              ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                                     Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fMonadParsecesParsecT_$ctoken @ Text.Megaparsec.Error.Dec
                                                      @ [GHC.Types.Char]
                                                      @ m
                                                      $dErrorComponent
                                                      $dStream
  = Parser.$s$fMonadParsecesParsecT_$s$fMonadParsecesParsecT_$ctoken
      @ m
"SPEC/Parser $fMonadPlusParsecT @ Dec @ [Char] _" [ALWAYS] forall @ (m :: *
                                                                          -> *)
                                                                  ($dStream :: Text.Megaparsec.Prim.Stream
                                                                                 [GHC.Types.Char])
                                                                  ($dErrorComponent :: Text.Megaparsec.Error.ErrorComponent
                                                                                         Text.Megaparsec.Error.Dec)
  Text.Megaparsec.Prim.$fMonadPlusParsecT @ Text.Megaparsec.Error.Dec
                                          @ [GHC.Types.Char]
                                          @ m
                                          $dErrorComponent
                                          $dStream
  = Parser.$s$fMonadParsecesParsecT_$s$fMonadPlusParsecT @ m
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

